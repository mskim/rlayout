IMAGE_PATTERNS = {
  "1/1x1/1"=>[[0, 0, 1, 1]], 
  "2/1x2/1"=>[[0, 0, 2, 1], [0, 1, 2, 1]], 
  "2/2x1/2"=>[[0, 0, 2, 1], [1, 0, 2, 1]], 
  "2/2x2/3"=>[[0, 0, 2, 1], [0, 1, 2, 1]], 
  "2/2x2/4"=>[[0, 0, 1, 2], [1, 0, 1, 2]], 
  "2/3x3/5"=>[[0, 0, 2, 2], [0, 2, 2, 1]], 
  "2/3x3/6"=>[[0, 0, 2, 1], [0, 1, 2, 2]], 
  "3/2x2/1"=>[[0, 0, 2, 1], [0, 1, 1, 2], [1, 1, 1, 1]], 
  "3/2x2/2"=>[[0, 0, 1, 1], [1, 0, 1, 1], [1, 1, 2, 1]], 
  "3/3x3/3"=>[[0, 0, 1, 1], [1, 1, 1, 1], [2, 2, 1, 1]], 
  "4/2x2/1"=>[[0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]], 
  "5/3x2/1"=>[[0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1],[2,0,1,2]], 
  "6/3x2/1"=>[[0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1],[2,0,1,1], [2,1,1,1]], 
  "8/4x2/1"=>[[0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1],[0, 1, 1, 1], [1, 1, 1, 1], [2, 1, 1, 1], [3, 1, 1, 1]], 
  "9/3x3/1"=>[[0, 0, 1, 1], [1, 0, 1, 1], [2, 0, 1, 1], [0, 1, 1, 1],[1, 1, 1, 1], [2, 1, 1, 1], [0, 2, 1, 1], [1, 2, 1, 1], [2,2,1,1]], 
}
  
#   "3x3/2"=>[[0, 0, 2, 2], [2, 2, 1, 1]], 
#   "3x3/3"=>[[0, 0, 1, 1], [1, 1, 1, 1], [2, 2, 1, 1]], 
#   "3x3/5"=>[[0, 0, 3, 1], [0, 1, 3, 1], [0, 2, 1, 1], [1, 2, 1, 1], [2, 2, 1, 1]], 
#   "3x3/6"=>[[0, 0, 3, 1], [0, 1, 2, 1], [2, 1, 1, 1], [0, 2, 1, 1], [1, 2, 1, 1], [2, 2, 1, 1]], 
#   "3x3/7"=>[[0, 0, 3, 1], [0, 1, 1, 1], [1, 1, 1, 1], [2, 1, 1, 1], [0, 2, 1, 1], [1, 2, 1, 1], [2, 2, 1, 1]], 
#   "3x3/8"=>[[0, 0, 1, 1], [1, 0, 1, 1], [2, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1], [2, 1, 1, 1], [0, 2, 1, 1], [1, 2, 2, 1]], 
#   "3x3/8_1"=>[[0, 0, 1, 1], [1, 0, 1, 1], [2, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1], [2, 1, 1, 1], [0, 2, 2, 1], [2, 2, 1, 1]], 
#   "3x3/8_2"=>[[0, 0, 2, 1], [2, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1], [2, 1, 1, 1], [0, 2, 1, 1], [1, 2, 1, 1], [2, 2, 1, 1]], 
#   "3x3/9"=>[[0, 0, 1, 1], [1, 0, 1, 1], [2, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1], [2, 1, 1, 1], [0, 2, 1, 1], [1, 2, 1, 1], [2, 2, 1, 1]], 
#   "6x6/1"=>[[0, 0, 1, 1]], 
#   "6x6/3"=>[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 
#   "7x11/3"=>[[0, 0, 4, 6], [4, 0, 3, 6], [0, 6, 7, 5]], 
#   "7x11/4"=>[[0, 0, 4, 5], [4, 0, 3, 5], [0, 5, 3, 6], [3, 5, 4, 6]], 
#   "7x11/5"=>[[0, 0, 7, 3], [0, 3, 4, 3], [4, 3, 3, 4], [0, 6, 4, 5], [4, 7, 3, 4]], 
#   "7x11/6"=>[[0, 0, 4, 3], [4, 0, 3, 4], [0, 3, 4, 3], [4, 4, 3, 3], [0, 6, 4, 5], [4, 7, 3, 4]], 
#   "7x12/H/4"=>[[0, 0, 7, 1], [0, 1, 4, 4], [4, 1, 3, 4], [0, 5, 7, 2], [0, 7, 7, 5]], 
#   "7x12/4"=>[[0, 1, 4, 4], [4, 1, 3, 4], [0, 5, 7, 2], [0, 7, 7, 5]], 
#   "7x12/H/5"=>[[0, 0, 7, 1], [0, 1, 4, 3], [4, 1, 3, 4], [0, 4, 4, 5], [4, 5, 3, 4], [0, 9, 7, 3]], 
#   "7x12/5"=>[[0, 0, 7, 3], [0, 3, 4, 3], [4, 3, 3, 4], [0, 6, 4, 5], [4, 7, 3, 4]], 
#   "7x12/H/6"=>[[0, 0, 7, 1], [0, 1, 4, 2], [4, 1, 3, 4], [0, 3, 4, 2], [0, 5, 4, 2], [4, 5, 3, 2], [0, 7, 7, 5]], 
#   "7x12/6"=>[[0, 1, 4, 2], [4, 1, 3, 4], [0, 3, 4, 2], [0, 5, 4, 2], [4, 5, 3, 2], [0, 7, 7, 5]], 
#   "7x12/7"=>[[0, 0, 7, 1], [0, 1, 4, 2], [4, 1, 3, 4], [0, 3, 4, 2], [0, 5, 4, 2], [4, 5, 3, 2], [0, 7, 7, 5]]]
# 

# ImageBox is a convient way to place multiple images on to page
#  
module RLayout
	class ImageBox < Container
	  attr_accessor :image_group_path, :images, :grid_base, :h_gutter, :v_gutter
	  def initialize(parent_graphic, options={})
	    super
	    @h_gutter = options.fetch(:h_gutter, 0)
      @v_gutter = options.fetch(:v_gutter, 0)
	    @image_group_path = options.fetch(:image_group_path, "images")
	    create_images
	    layout_images
	    self
	  end
	  
	  def parse_images
	    @images = Dir.glob("#{@image_group_path}/*{.jpg,.pdf,.tiff}")
	  end
	  
	  def create_images
	    parse_images
	    puts "@images:#{@images}"
	    @images.each_with_index do |image_path|
	      Image.new(self)
      end
	  end
	  
	  def layout_images
	    choices = pattern_with_image_count(@images.length)
	    pattern = choices.first
	    column  = pattern.keys[0].split("/")[1].split("x")[0].to_i
	    row     = pattern.keys[0].split("/")[1].split("x")[1].to_i
	    puts "column:#{column}"
	    puts "row:#{row}"
	    grid_width  = @width/column.to_f
	    grid_height = @height/row.to_f
	    @images.each_with_index do |image, i|
	      x       = pattern[i][0]*grid_width  # add gutter
	      y       = pattern[i][1]*grid_height # add gutter
	      width   = pattern[i][2]*grid_height + (pattern[i][2] - 1)*@h_gutter
	      height  = pattern[i][3]*grid_height + (pattern[i][3] - 1)*@v_gutter
	      image.set_frame([x,y,width,height])
      end
	  end
	  
	  # return grid_layout with given cell count 
    def pattern_with_image_count(cell_count)
      choices = []
      IMAGE_PATTERNS.each do |k,v|
        choices << {k=> v} if k =~/^#{cell_count}/
      end
      choices
    end
	end

end